version: "3.9"

services:
  traefik:
    # 최신 버전(지금은)입니다.
    image: traefik:v2.5
    ports:
      # 80번에서 HTTP 대기합니다. HTTPS로 리다이렉트 할거예요.
      - target: 80
        published: 80
        mode: host
      # 443번에서 듣습니다. HTTPS용.
      - target: 443
        published: 443
        mode: host
    deploy:
      labels:
        # Traefik을 활성화합니다. 퍼블릭 네트워크에서 사용 가능해집니다.
        - traefik.enable=true
        # 사전에 정의해둔 네트워크를 사용합니다.
        - traefik.docker.network=traefik-public
        # Basic auth를 사용하는 admin-auth 미들웨어를 준비합니다.
        # 환경변수로 주어진 USERNAME와 HASHED_PASSWORD를 쓸 거예요.
        - traefik.http.middlewares.admin-auth.basicauth.users=${USERNAME?Variable not set}:${HASHED_PASSWORD?Variable not set}
        # HTTP를 HTTPS로 리다이렉트하는 https-redirect 미들웨어를 준비합니다.
        # 다른 Docker Compose 파일에서도 재활용 가능해요.
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        # 어드민 페이지로 가는 HTTP 라우터를 정의합니다. HTTPS로 리다이렉트만 할 목적입니다.
        - traefik.http.routers.traefik-public-http.rule=Host(`traefik.${DOMAIN_MAIN?Variable not set}`)
        - traefik.http.routers.traefik-public-http.entrypoints=http
        - traefik.http.routers.traefik-public-http.middlewares=https-redirect
        # 어드민 페이지로 가는 HTTPS 라우터를 정의합니다. 얘가 실제로 쓰여요.
        - traefik.http.routers.traefik-public-https.rule=Host(`traefik.${DOMAIN_MAIN?Variable not set}`)
        - traefik.http.routers.traefik-public-https.entrypoints=https
        - traefik.http.routers.traefik-public-https.tls=true
        # 요 HTTPS 라우터를 어드민 서비스(api@internal)와 이어줍니다.
        - traefik.http.routers.traefik-public-https.service=api@internal
        # 인증서는 "le" (Let's Encrypt)가 도와줍니다.
        - traefik.http.routers.traefik-public-https.tls.certresolver=le
        # 인증서 발급의 대상이 될 도메인을 지정해 줍니다.
        # 와일드카드는 지금 TLS 챌린지로는 사용을 못 해요 ㅠ
        - traefik.http.routers.traefik-public-https.tls.domains[0].main=${DOMAIN_MAIN}
        - traefik.http.routers.traefik-public-https.tls.domains[0].sans=${DOMAIN_SANS}
        # 위에서 만든 admin-auth 미들웨어를 HTTPS 라우터에 끼워 줍니다.
        - traefik.http.routers.traefik-public-https.middlewares=admin-auth
        # 어드민 페이지 서비스가 사용하는 포트를 지정해 줍니다.
        - traefik.http.services.traefik-public.loadbalancer.server.port=8080
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount the volume to store the certificates
      - traefik-public-certificates:/certificates
    command:
      # Docker를 활성화합니다. 이래야 Docker 서비스 label을 읽을 수 있어요.
      - --providers.docker
      # 명시적으로 노출을 설정한 서비스만 노출합니다.
      - --providers.docker.exposedbydefault=false
      # Watch 활성화합니다.
      - --providers.docker.watch
      # Swarm 모드로 실행합니다.
      - --providers.docker.swarmmode
      # HTTP 엔트리 포인트는 아무데서나 80번 포트로 받습니다.
      - --entrypoints.http.address=:80
      # HTTPS 엔트리 포인트는 아무데서나 443번 포트로 받습니다.
      - --entrypoints.https.address=:443
      # 위에서 만든 le 리졸버에 이메일을 설정해줍니다.
      - --certificatesresolvers.le.acme.email=${EMAIL?Variable not set}
      # 인증서 저장소를 마운트된 볼륨으로 설정해줍니다.
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      # 인증서 발급 때에는 TLS 챌린지를 사용합니다.
      - --certificatesresolvers.le.acme.tlschallenge=true
      # HTTP 요청 접근 기록을 남깁니다.
      - --accesslog
      # 로그 활성화합니다.
      - --log
      # 대시보드와 API를 활성화합니다.
      - --api
    networks:
      # 사전에 정의해 둔 퍼블릭 네트워크를 Traefik과 다른 서비스 사이에서 공유합니다.
      - traefik-public

volumes:
  # 인증서를 저장할 볼륨을 생성합니다.
  # Traefik을 배포할 때, 같은(노드와 볼륨) 환경에 배포해야 합니다.
  traefik-public-certificates:

networks:
  # 사전에 정의한 퍼블릭 네트워크를 사용합니다.
  # external: true를 써서 미리 만들어진 네트워크를 사용할 것임을 명시합니다.
  traefik-public:
    external: true
